version: '3.8'

services:
  # ============================================================================
  # PostgreSQL Database
  # ============================================================================
  postgres:
    image: postgres:16-alpine
    container_name: dom360-postgres
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-admin}
      POSTGRES_INITDB_ARGS: "-c shared_preload_libraries=uuid-ossp"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      # Persistência de dados
      - postgres_data:/var/lib/postgresql/data
      # Executar schema e seed na inicialização
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seeds/001_seed_master.sql:/docker-entrypoint-initdb.d/02-seed.sql
    networks:
      - dom360-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ============================================================================
  # Backend API (FastAPI)
  # ============================================================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dom360-backend
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-dom360_db_sdk}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-admin}
      
      # Backend Settings
      BACKEND_PORT: 3001
      BACKEND_BIND_HOST: 0.0.0.0
      BACKEND_BIND_PORT: 3001
      INTERNAL_BACKEND_HOST: 0.0.0.0
      INTERNAL_BACKEND_PORT: 3001
      PUBLIC_BACKEND_URL: ${PUBLIC_BACKEND_URL:-http://localhost:3001}
      PUBLIC_BACKEND_HOST: ${PUBLIC_BACKEND_HOST:-localhost}
      
      # Frontend Settings
      PUBLIC_FRONTEND_URL: ${PUBLIC_FRONTEND_URL:-http://localhost:5173}
      PUBLIC_FRONTEND_HOST: ${PUBLIC_FRONTEND_HOST:-localhost}
      
      # API & Security
      AGENT_API_URL: ${AGENT_API_URL:-http://localhost:8000}
      JWT_SECRET: ${JWT_SECRET:-eSGm2XZ8lBfB++3TOt0Tp0rR8MimWnohTD9oqaq+Q84=}
      
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:5173,http://localhost:3001}
      
      # Environment
      PYTHON_ENV: ${PYTHON_ENV:-production}
      NODE_ENV: ${NODE_ENV:-production}
    
    ports:
      - "3001:3001"
    
    depends_on:
      postgres:
        condition: service_healthy
    
    networks:
      - dom360-network
    
    volumes:
      - ./logs:/app/logs
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    restart: unless-stopped

  # ============================================================================
  # Nginx Reverse Proxy (Opcional)
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: dom360-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    networks:
      - dom360-network
    restart: unless-stopped
    profiles:
      - nginx  # Execute com: docker-compose --profile nginx up -d

  # ============================================================================
  # pgAdmin (Ferramentas de administração - Opcional)
  # ============================================================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: dom360-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@dom360.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - "5050:80"
    networks:
      - dom360-network
    profiles:
      - pgadmin  # Execute com: docker-compose --profile pgadmin up -d
    restart: unless-stopped

# ============================================================================
# Volumes Persistentes
# ============================================================================
volumes:
  postgres_data:
    driver: local

# ============================================================================
# Rede Docker
# ============================================================================
networks:
  dom360-network:
    driver: bridge
