# ==============================================================================
# .env.production.example
# ==============================================================================
# Configuração para produção com Docker
#
# INSTRUÇÕES:
# 1. Copie este arquivo para .env.production
# 2. Edite os valores conforme necessário
# 3. Use com: docker compose -f docker-compose.prod.yml --env-file .env.production up -d
#
# Para Portainer:
# - Cole as variáveis manualmente na seção "Environment" ao criar a Stack
# ==============================================================================

# ============================================================================
# DATABASE - Banco de Dados PostgreSQL
# ============================================================================

# Se usar Postgres LOCAL na máquina:
#   DB_HOST=host.docker.internal (para Docker Desktop/Linux 20.10+)
#   DB_PORT=5432 (porta padrão do Postgres)
#   Deixe o serviço "postgres" desativado (não use --profile with-db)
#
# Se usar Postgres CONTAINERIZADO (novo):
#   DB_HOST=postgres (nome do serviço)
#   Use: docker compose --profile with-db -f docker-compose.prod.yml up -d
#
# Recomendado: Usar Postgres local existente se tiver instalado

DB_HOST=host.docker.internal
DB_PORT=5432
DB_NAME=dom360_db_sdk
DB_USER=postgres
DB_PASSWORD=SenhaForte123!

# Retry logic para conexão com o banco
DB_MAX_RETRIES=30
DB_RETRY_INTERVAL=2

# Pool de conexões
DB_POOL_MIN=2
DB_POOL_MAX=10

# Caminho para armazenar dados do Postgres (se usar containerizado)
POSTGRES_DATA_PATH=./data/postgres

# ============================================================================
# BACKEND - API FastAPI
# ============================================================================

# Porta do backend (será exposta como 3001:3001 no docker-compose)
BACKEND_PORT=3001

# URLs públicas (usadas para CORS e links externos)
# IMPORTANTE: Deve corresponder aos domínios do nginx
PUBLIC_BACKEND_URL=https://api.srcjohann.com.br
PUBLIC_FRONTEND_URL=https://sdk.srcjohann.com.br

# ============================================================================
# FRONTEND - React + Vite
# ============================================================================

# Porta do frontend (será exposta como 8080:8080 no docker-compose)
FRONTEND_PORT=8080

# ============================================================================
# SECURITY - Segurança
# ============================================================================

# JWT Secret para autenticação
# GERE UM NOVO: python -c "import secrets; print(secrets.token_urlsafe(32))"
JWT_SECRET=GenerateNewSecretWithCommand123!

# CORS - Origens permitidas (comma-separated)
# Domínios que podem fazer requests para o backend
CORS_ORIGINS=https://sdk.srcjohann.com.br,https://api.srcjohann.com.br

# ============================================================================
# AGENT API - Integração com agentes
# ============================================================================

# URL do Agent API (SDR/COPILOT)
# Configure para apontar ao seu serviço de agentes
AGENT_API_URL=http://seu-agent-api:8000

# ============================================================================
# NGINX - Reverse Proxy
# ============================================================================

# Nginx receberá requisições em:
#   - 80:80 (HTTP)
#   - 443:443 (HTTPS - quando configurar SSL)
#
# Roteia para:
#   - api.srcjohann.com.br → backend:3001
#   - sdk.srcjohann.com.br → frontend:8080
#
# SSL/TLS:
# - Coloque certificados em nginx/ssl/ com nomes:
#   - api.srcjohann.com.br.crt
#   - api.srcjohann.com.br.key
#   - sdk.srcjohann.com.br.crt
#   - sdk.srcjohann.com.br.key
# - Descomente a seção HTTPS nos arquivos nginx/conf.d/*.conf

# ============================================================================
# LOGS
# ============================================================================

# Logs serão armazenados em:
#   ./logs/backend/     - Logs da API FastAPI
#   ./logs/frontend/    - Logs do Nginx frontend
#   ./logs/nginx/       - Logs do Nginx reverse proxy

# ============================================================================
# ENVIRONMENT
# ============================================================================

# Ambiente (development, staging, production)
PYTHON_ENV=production
NODE_ENV=production

# ============================================================================
# PORTAINER DEPLOYMENT
# ============================================================================

# Se usar Portainer:
# 1. Acesse Portainer em http://seu-portainer:9000
# 2. Vá para "Stacks" → "Add Stack"
# 3. Cole o conteúdo de portainer-stack.yml
# 4. Adicione as variáveis de ambiente abaixo manualmente:
#
#    DB_HOST=postgres
#    DB_PASSWORD=SenhaForte123!
#    JWT_SECRET=GenerateNewSecretWithCommand123!
#    PUBLIC_BACKEND_URL=https://api.srcjohann.com.br
#    PUBLIC_FRONTEND_URL=https://sdk.srcjohann.com.br
#    CORS_ORIGINS=https://sdk.srcjohann.com.br,https://api.srcjohann.com.br
#    AGENT_API_URL=http://seu-agent-api:8000
#
# 5. Em "Environment" adicione: with-db (se quiser Postgres containerizado)
# 6. Deploy!

# ============================================================================
# TROUBLESHOOTING
# ==============================================================================

# PROBLEMA: Backend não encontra o banco de dados
# SOLUÇÃO:
#   1. Verifique se PostgreSQL está rodando
#   2. Se local: confirme DB_HOST=host.docker.internal
#   3. Se containerizado: certifique-se de usar --profile with-db
#   4. Verifique credenciais (DB_USER, DB_PASSWORD)
#   5. Verifique permissões de rede

# PROBLEMA: Frontend não conecta ao backend
# SOLUÇÃO:
#   1. Verifique se o backend está saudável: curl http://localhost:3001/api/health
#   2. Verifique CORS_ORIGINS no backend
#   3. Verifique se o nginx está roteiando corretamente
#   4. Verifique domínios no nginx/conf.d/

# PROBLEMA: Nginx não roteia os domínios
# SOLUÇÃO:
#   1. Verifique hosts do seu sistema apontam para o IP correto
#   2. Verifique nginx/conf.d/api.conf e nginx/conf.d/frontend.conf
#   3. Test: curl -H "Host: api.srcjohann.com.br" http://localhost/api/health
#   4. Verifique logs: docker logs sdk-nginx

# PROBLEMA: SSL/TLS não funciona
# SOLUÇÃO:
#   1. Coloque certificados em nginx/ssl/
#   2. Descomente seção HTTPS nos conf.d/*.conf
#   3. Redirecione HTTP → HTTPS
#   4. Teste: curl https://api.srcjohann.com.br

# ============================================================================
# Backend API (FastAPI)
# ============================================================================
BACKEND_PORT=3001
AGENT_API_URL=http://localhost:8000

# Back-end binding and public URL
BACKEND_BIND_HOST=0.0.0.0
BACKEND_BIND_PORT=3001
INTERNAL_BACKEND_HOST=127.0.0.1
INTERNAL_BACKEND_PORT=3001

# ⚠️ CRÍTICO: Configure com seu domínio ou IP público da VPS
# Exemplos:
#   Com domínio: http://api.seudominio.com
#   Sem domínio: http://203.0.113.10 (seu IP público)
PUBLIC_BACKEND_URL=http://api.seudominio.com
PUBLIC_BACKEND_HOST=api.seudominio.com

# ============================================================================
# Frontend (React + Vite)
# ============================================================================
# ⚠️ CRÍTICO: Esta URL será incluída no build do frontend!
# NUNCA use 127.0.0.1 ou localhost em produção!
# 
# Desenvolvimento local:    http://127.0.0.1:3001
# Produção com domínio:     http://api.seudominio.com
# Produção sem domínio:     http://203.0.113.10:3001
VITE_API_URL=http://api.seudominio.com

# Tenant e Inbox IDs (usar quotes para UUID)
VITE_TENANT_ID="00000000-0000-0000-0000-000000000001"
VITE_INBOX_ID="00000000-0000-0000-0001-000000000001"

# Dados de teste do usuário
VITE_USER_PHONE="+5511999998888"
VITE_USER_NAME="Usuário Teste"

# Front-end binding and public URL
FRONTEND_BIND_HOST=0.0.0.0
FRONTEND_BIND_PORT=5173
INTERNAL_FRONTEND_HOST=127.0.0.1
INTERNAL_FRONTEND_PORT=5173

# ⚠️ CRÍTICO: Configure com seu domínio ou IP público da VPS
PUBLIC_FRONTEND_URL=http://seudominio.com
PUBLIC_FRONTEND_HOST=seudominio.com

# ============================================================================
# Security
# ============================================================================
# ⚠️ CRÍTICO: Gere um secret forte e NUNCA compartilhe!
# Para gerar: openssl rand -base64 32
JWT_SECRET="GERE_UM_SECRET_FORTE_AQUI"

# Opcional: Chave de criptografia para dados sensíveis
# ENCRYPTION_KEY="GERE_OUTRA_CHAVE_AQUI"

# ============================================================================
# CORS (Cross-Origin Resource Sharing)
# ============================================================================
# Lista de origens permitidas (separadas por vírgula)
# Em produção, especifique apenas os domínios necessários
CORS_ORIGINS=http://seudominio.com,https://seudominio.com,http://api.seudominio.com,https://api.seudominio.com

# ============================================================================
# Environment
# ============================================================================
NODE_ENV=production
PYTHON_ENV=production

# ============================================================================
# INSTRUÇÕES DE DEPLOY
# ============================================================================
#
# 1. Copie este arquivo para .env:
#    cp .env.production .env
#
# 2. Edite .env e altere TODOS os valores marcados com ⚠️ CRÍTICO
#
# 3. Gere secrets seguros:
#    openssl rand -base64 32
#
# 4. Configure DNS (se usar domínio):
#    seudominio.com     A    203.0.113.10
#    api.seudominio.com A    203.0.113.10
#
# 5. Execute o script de deploy:
#    sudo bash deploy_vps.sh
#
# 6. Após deploy, configure SSL:
#    sudo certbot --nginx -d seudominio.com -d api.seudominio.com
#
# ============================================================================
# CHECKLIST PRÉ-DEPLOY
# ============================================================================
#
# [ ] DB_PASSWORD alterado para senha forte
# [ ] JWT_SECRET gerado com openssl rand -base64 32
# [ ] VITE_API_URL aponta para domínio/IP público (NÃO localhost!)
# [ ] PUBLIC_BACKEND_HOST configurado corretamente
# [ ] PUBLIC_FRONTEND_HOST configurado corretamente
# [ ] DNS configurado (se usar domínio)
# [ ] Firewall permite portas 80, 443, 22
# [ ] PostgreSQL instalado e rodando
# [ ] Nginx instalado
#
# ============================================================================
