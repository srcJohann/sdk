# ==============================================================================
# Portainer Stack File
# Cole este conteúdo no Portainer ao criar a Stack via Web Editor
# ==============================================================================

# IMPORTANTE: 
# 1. Adicione as variáveis de ambiente na seção "Environment variables" do Portainer
# 2. Para usar Postgres interno, adicione "--profile with-db" em "Advanced mode"

version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: sdk-postgres
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-dom360_db_sdk}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - sdk-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    profiles:
      - with-db

  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    container_name: sdk-backend
    environment:
      DB_HOST: ${DB_HOST:-postgres}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-dom360_db_sdk}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_MAX_RETRIES: ${DB_MAX_RETRIES:-30}
      DB_RETRY_INTERVAL: ${DB_RETRY_INTERVAL:-2}
      BACKEND_BIND_HOST: 0.0.0.0
      BACKEND_BIND_PORT: 3001
      BACKEND_PORT: 3001
      PUBLIC_BACKEND_URL: ${PUBLIC_BACKEND_URL:-https://api.srcjohann.com.br}
      PUBLIC_FRONTEND_URL: ${PUBLIC_FRONTEND_URL:-https://sdk.srcjohann.com.br}
      AGENT_API_URL: ${AGENT_API_URL:-http://localhost:8000}
      JWT_SECRET: ${JWT_SECRET:-change-this-secret-in-production}
      CORS_ORIGINS: ${CORS_ORIGINS:-https://sdk.srcjohann.com.br,https://api.srcjohann.com.br}
      PYTHON_ENV: production
      NODE_ENV: production
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    networks:
      - sdk-network
    volumes:
      - ./logs:/app/logs
      - ./database:/app/database:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
        required: false

  frontend:
    build:
      context: ./frontend/app
      dockerfile: Dockerfile
    container_name: sdk-frontend
    environment:
      VITE_API_URL: ${PUBLIC_BACKEND_URL:-https://api.srcjohann.com.br}
    ports:
      - "${FRONTEND_PORT:-8080}:8080"
    networks:
      - sdk-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: sdk-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - sdk-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  sdk-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
